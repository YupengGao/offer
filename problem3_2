How would you design a stack which, in addition to push and pop, also hasa function min which returns the minimum element? Push, pop and min should all operate in O(1) time.

public class MinStack {
    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> minStack = new Stack<Integer>();
    // int min;
    /** initialize your data structure here. */
    public MinStack() {
        // min = Integer.MAX_VALUE;
    }
    
    public void push(int x) {
        if(stack.isEmpty()){
            stack.push(x);
            minStack.push(x);
        }else{
            stack.push(x);
            int min = Math.min(x, minStack.peek());
            minStack.push(min);
        }
    }
    
    public void pop() {
        if(stack.isEmpty()){
            return;
        }
        stack.pop();
        minStack.pop();
        
    }
    
    public int top() {
        if(stack.isEmpty()){
            throw new IllegalArgumentException("the stack is empty");
        }
        return stack.peek();
    }
    
    public int getMin() {
        if(stack.isEmpty()){
            throw new IllegalArgumentException("the stack is empty");
        }
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
