class problem2_5_followUp{
	static class Node{
		int val;
		Node next;
		Node(int v){
			this.val = v;
		}
	}
	public static Node add(Node head1, Node head2){
		if(head1 == null){
			return head2;
		}
		if(head2 == null){
			return head1;
		}
		int len1 = getLen(head1);
		int len2 = getLen(head2);
		Node res = null;
		int carry[] = new int[1];
		if(len1 == len2){
			res = addSameLength(head1, head2, carry);
		}else{
			int diff = Math.abs(len1 - len2);
			if(len1 < len2){
				Node d = head1;
				head1 = head2;
				head2 = d;
			}
			
			Node cur = head1;
			for(int i  = 0 ; i < diff; i++){
				cur = cur.next;
			}
			res = addSameLength(cur, head2, carry);
			res = addRemaining(head1, cur, res, carry);
		}
		if(carry[0] > 0){
			Node temp = new Node(carry[0]);
			temp.next = res;
			res = temp;
		}
		return res;
	}

	public static Node addSameLength(Node head1, Node head2, int carry[]){
		if(head1 == null && head2 == null){
			return null;
		}
		Node res = addSameLength(head1.next, head2.next, carry);
		int val = (head1.val + head2.val + carry[0]) % 10;
		carry[0] = (head1.val + head2.val + carry[0]) / 10;
		Node head = new Node(val);
		head.next = res;
		return head;

	}

	public static Node addRemaining(Node head1, Node cur, Node res, int carry[]){
		if(head1 == cur){
			return res;
		}
		Node node = addRemaining(head1.next, cur, res, carry);
		int val = (head1.val + carry[0]) % 10;
		carry[0] = (head1.val + carry[0]) / 10;
		Node head = new Node(val);
		head.next = node;
		return head;
	}

	
	public static int getLen(Node head){
		if(head == null){
			return 0;
		}
		int count = 0;
		while(head != null){//bug!!!!!!!!
			head = head.next;
			count++;
		}
		return count;
	}

	public static void swapHead(Node head1, Node head2){
		Node temp = head1;
		head1 = head2;
		head2 = temp;
	}
	public static void main(String[] args) {
		Node node1 = new Node(9);
		Node node6 = new Node(9);
		Node node2 = new Node(3);
		Node node3 = new Node(8);
		Node node4 = new Node(9);
		Node node5 = new Node(2);
		
		node1.next = node6;
		node6.next = node2;
		node2.next = node3;
		// node3.next = node4;
		node4.next = node5;


		Node head1 = node1;
		Node head2 = node4;
		Node head = add(head2, head1);
		while(head != null){
			System.out.println(head.val);
			head = head.next;
		}
	}
}
